var documenterSearchIndex = {"docs":
[{"location":"fitpredictFreq/#Fitting-and-Predicting-Frequency-data-1","page":"Frequency data","title":"Fitting and Predicting - Frequency data","text":"","category":"section"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"RHEOS can also fit models to dynamic mechanical analysis data from oscillatory tests","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"using RHEOS","category":"page"},{"location":"fitpredictFreq/#Fitting-1","page":"Frequency data","title":"Fitting","text":"","category":"section"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"Step 1: Loading of the experimental data","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"RHEOS has a convenient function to import data from CSV files (more information in File I/O section).","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"data = importcsv(\"data_freq.csv\", ω_col=1, Gp_col=2, Gpp_col=3);\nRheoFreqDataType(data)","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"┌ Warning: Please note that NaN data rows are not included in resultant data struct.\n└ @ RHEOS /home/alessandra/.julia/dev/RHEOS/src/IO.jl:11","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"with_modulus::FreqDataType = 1","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"The frequency, storage modulus and loss modulus are stored into a RheoFreqData struct. ","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"Step 2: Model fit","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"Let's fit a Fractional Kelvin-Voigt model. The first argument is our data, the second argument tells RHEOS which model to fit (RheoModelClass). The function will return a RheoModel object, i.e. a RheoModelClass with fixed values for the parameters. The function dynamicmodelfit possesses all the additional arguments (lower and upper bounds, initial parameters, tolerance) as for the fitting of time data.","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"# Lower bounds\nLo = (cₐ=0.0, a=0.01, cᵦ=0.0, β = 0.01)\n# Upper bounds\nHi = (cₐ=1e2, a=0.99, cᵦ=1e2, β = 0.99)\n# Initial parameters\nP0 = (cₐ=1.0, a=0.36, cᵦ=1.0, β = 0.03)\n\nFractKV_model = dynamicmodelfit(data, Fract_KelvinVoigt, weights = \"log\", lo = Lo, hi = Hi, p0 = P0)","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"┌ Warning: Note that a logarithmic rescaling will fail if Gp or Gpp data contain 0.0 values as it will result in -Inf cost. Trying a different rescaling scheme, or not fitting around ω≈0.0 may alleviate the issue.\n└ @ RHEOS /home/alessandra/.julia/dev/RHEOS/src/processing.jl:714","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"Time: 0.385953893 s, Why: XTOL_REACHED, Parameters: [0.00921903, 0.770062, 0.913296, 0.100392], Error: 0.34215629087463373","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"Model: fractKV\n\nParameter values: (cₐ = 0.009219028112809006, a = 0.7700618789054214, cᵦ = 0.9132958174053891, β = 0.10039200856098299) \n\n                ________ ╱╲ ________\n               |         ╲╱  cₐ, a  |\n           ____|                    |____\n               |                    |\n               |________ ╱╲ ________|\n                         ╲╱  cᵦ, β","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"For the fitting process RHEOS relies on the optimistion package NLopt.jl. RHEOS makes use of a local derivative free algorithm, specifically the Tom Rowan's \"Subplex\" algorithm originally introduced in ","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"T. Rowan, \"Functional Stability Analysis of Numerical Algorithms\", Ph.D. thesis, Department of Computer Sciences, University of Texas at Austin, 1990.","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"The storage and loss moduli can sometimes occupy different orders of magnitude. This can cause problems during fitting as the optimisation routine will weight errors at the higher orders of magnitude more strongly than those at the lower orders of magnitude. This is a more general problem often faced during multi-objective optimisation problems. RHEOS offers four rescaling options (weight):","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"The local option rescales the cost at each point by the point itself. \nThe log approach simply re-scales all the storage and loss moduli and their predicted values logarithmically before finding the error between them. \nA third option in RHEOS divides the cost at each point by the mean value of the storage and loss modulus respectively depending on which cost is being calculated. This can work well but performance is hindered if the storage or loss moduli individually vary over many orders of magnitude (mean). \nThe fourth option offered by RHEOS is simply manual weightings provided by the user for each modulus (manual). ","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"In the first two cases, the benefit arises from the fact that the optimisation weighting is rebalanced in favour of smaller values. The logarithmic rescaling method seems to work particularly well but runs into problems if the storage or loss moduli are exactly 0 at any frequency, this is due to the negative singularity of the logarithmic function for the 0 argument. 0 arguments can also cause problems using the local option due to division by 0.","category":"page"},{"location":"fitpredictFreq/#Predicting-1","page":"Frequency data","title":"Predicting","text":"","category":"section"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"RHEOS allows the user to simulate the frequency response of a model (with defined parameters, RheoModel struct) to an imposed loading. ","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"Given an incomplete data set (frequency only) and model with values substituted into parameters (RheoModel), return a new \"complete\" dataset based on the model with the simulated missing variable (storage and loss).","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"Assess quality of the fit","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"The ability of predicting model's response is first exploited to assess the quality of the fits above. The incomplete RheoFreqData variable is defined by extracting the frequency from the original data or by defining a new frequency vector.","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"data_ext = extract(data,freq_only);\n# Alternatively, a RheoFreqData with only frequency data can be generated as\n# data_gen = frequencyspec(ω_start=1.0e-2, ω_end=1.0e2, step=1.0e-5)\n\nRheoFreqDataType(data_ext)","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"freq_only::FreqDataType = 0","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"For the prediction, RHEOS' function dynamicmodelpredict requires the incomplete data set and a model with fixed parameters (RheoModel). For the assessment of the fitting quality the RheoModel is the output of the fitting function. ","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"fractKV_predict = dynamicmodelpredict(data_ext, FractKV_model)\n\n# Now we can plot data and model together for comparison\nusing PyPlot\nloglog(data.ω, data.Gp, \"o\", markersize = 5, color=\"blue\");\nloglog(data.ω, data.Gpp, \"o\", markersize = 5, color = \"red\");\nloglog(fractKV_predict.ω, fractKV_predict.Gp, \"--\", color=\"blue\");\nloglog(fractKV_predict.ω, fractKV_predict.Gpp, \"--\", color=\"red\");\nxlabel(\"Frequency\");\nylabel(\"Storage and Loss moduli\");","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"(Image: png)","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"Simulate different model behaviours","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"The ability of predicting model's response can be exploited to simulate the behaviour of the model to other external loading conditions. For example, we will explore the response of the fitted model to a creep experiment. ","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"First we need to define an incomplete RheoTimeData struct, which can be achieved via the data generation functions provided in RHEOS (see section Generating Data).","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"# Define timeline\ndσ = timeline()\n# and a step in stress\ndσ = stressfunction(dσ,hstep())\n\n# we can now predict the creep response of the Maxwell model \nFractKV_creepPredict = modelsteppredict(dσ,FractKV_model)\n# Visualisation of the simulated response\nplot(FractKV_creepPredict.t,FractKV_creepPredict.ϵ);\nxlabel(\"Time\");\nylabel(\"Strain\");","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"(Image: png)","category":"page"},{"location":"fitpredictFreq/#","page":"Frequency data","title":"Frequency data","text":"Reference frequency data: Deng, Linhong, et al. \"Fast and slow dynamics of the cytoskeleton.\" Nature materials 5.8 (2006): 636.","category":"page"},{"location":"preprocessing/#Preprocessing-of-Data-1","page":"Preprocessing","title":"Preprocessing of Data","text":"","category":"section"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"RHEOS offers several functions for sampling and filtering data; this page is intended to be a brief tutorial of their use. For detailed descriptions of functions and their optional arguments, see the API section. ","category":"page"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"using RHEOS\nusing PyPlot","category":"page"},{"location":"preprocessing/#Upsampling-and-Downsampling-1","page":"Preprocessing","title":"Upsampling and Downsampling","text":"","category":"section"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"We generate a simple sinusoid with constant sampling rate (more details about data generation are discussed in the Generating Data section).","category":"page"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"# Generate a sinusoidal data set\nfoo=timeline(t_start=0, t_end=10, step = 0.4)\nfoo=strainfunction(foo,t->sin(t))\nfig, ax = subplots(1,1, figsize=(5,5))\nax.plot(foo.t, foo.ϵ, \"--\", marker = \"o\", markersize = 8, color = \"blue\");","category":"page"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"(Image: png)","category":"page"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"To downsample the full data set by taking every nth sample, the function resample is defined with negative argument. Similarly, to increase the sample rate, the function resample is defined with positive argument.","category":"page"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"Note: when 1 or -1 is defined, the function returns the original RheoTimeData, whilst 0 is not accepted as a valid argument. ","category":"page"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"# Downsample\nfoo_dsamp = resample(foo, -2)\n# Upsample\nfoo_usamp = resample(foo, 2)\n\n# Plotting\nfig, ax = subplots(1,2, figsize=(10,5))\nax[1].set_title(\"Downsampling\")\nax[1].plot(foo.t, foo.ϵ, \"--\", marker = \"o\", markersize = 8, color = \"blue\");\nax[1].plot(foo_dsamp.t, foo_dsamp.ϵ, \"--\", marker = \"x\", markersize = 10, markeredgewidth=2, color = \"orange\");\nax[2].set_title(\"Upsampling\")\nax[2].plot(foo.t, foo.ϵ, \"--\", marker = \"o\", markersize = 8, color = \"blue\");\nax[2].plot(foo_usamp.t, foo_usamp.ϵ, \"--\", marker = \"x\", markersize = 10, markeredgewidth=2, color = \"orange\");","category":"page"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"(Image: png)","category":"page"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"RHEOS also allows us to define time regions with different sampling rate. This requires the definition of the time boundaries to delimit where one sample rate finishes and another begins, it also includes the beginning and end points so the length of the time boundaries array argument should be one longer than the number of sample rates provided.","category":"page"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"# Variable sampling: Downsampling region [0,5] and upsampling [5,10]\nfoo_samp = resample(foo, [-2,2], time_boundaries = [0.0, 5.0, 10.0])\n\n# Plotting\nfig, ax = subplots(1,1, figsize=(5,5))\nax.plot(foo.t, foo.ϵ, \"--\", marker = \"o\", markersize = 8, color = \"blue\");\nax.plot(foo_samp.t, foo_samp.ϵ, \"--\", marker = \"x\", markersize = 10, markeredgewidth=2, color = \"orange\");","category":"page"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"(Image: png)","category":"page"},{"location":"preprocessing/#Cutting-1","page":"Preprocessing","title":"Cutting","text":"","category":"section"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"RHEOS provides a dedicated function to remove the data outside a specified time interval.","category":"page"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"foo_cut = cutting(foo, 2.0, 8.0)\n\n# Plotting\nfig, ax = subplots(1,1, figsize=(5,5))\nax.plot(foo.t, foo.ϵ, \"--\", marker = \"o\", markersize = 8, color = \"blue\");\nax.plot(foo_cut.t, foo_cut.ϵ, \"--\", marker = \"x\", markersize = 10, markeredgewidth=2, color = \"orange\");","category":"page"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"(Image: png)","category":"page"},{"location":"preprocessing/#Smoothing-1","page":"Preprocessing","title":"Smoothing","text":"","category":"section"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"Lastly, RHEOS provides a smoothing function, smooth. The first argument is the data to smooth and the second argument is the (very) approximate time scale of smoothing. (It uses Gaussian smoothing and can be thought of as a low pass filter for information occuring on time scales shorter than the 2nd argument). The padding can be changed using a keyword argument if desired, see API and ImageFiltering.jl Documentation for more details. ","category":"page"},{"location":"preprocessing/#","page":"Preprocessing","title":"Preprocessing","text":"foo_s=timeline(t_start=0, t_end=10, step = 0.02);\nfoo_s=strainfunction(foo_s,t->3*sin(t));\nnoise=strainfunction(foo_s,t->rand());\n\nfoo_noisy = foo_s + noise\nfoo_smooth = smooth(foo_noisy, 1)\n\nfig, ax = subplots(1,1, figsize=(5,5))\nax.plot(foo_noisy.t, foo_noisy.ϵ, color = \"blue\");\nax.plot(foo_smooth.t, foo_smooth.ϵ, color = \"orange\");","category":"page"},{"location":"fileIO/#File-I/O-1","page":"File I/O","title":"File I/O","text":"","category":"section"},{"location":"fileIO/#Import-data-1","page":"File I/O","title":"Import data","text":"","category":"section"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"using RHEOS","category":"page"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"RHEOS has a convenience function for importing data from CSV files: importcsv. The default column delimiter is ',' but an alternative can be specified as a keyword argument. The row delimiter is a newline character ('\\n'). For standard time-domain viscoelastic testing data RHEOS expects either stress, strain and time data, just stress and time, or just strain and time. Arguments must be identified by providing the number of the column in which they are contained. The function returns a RheoTimeData object.","category":"page"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"# Import file\ndata_1 = importcsv(\"data_time.csv\", t_col=1, ϵ_col=2, σ_col=3)\n# Check data type\nRheoTimeDataType(data_1)","category":"page"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"┌ Warning: Please note that NaN data rows are not included in resultant data struct.\n└ @ RHEOS /home/alessandra/.julia/dev/RHEOS/src/IO.jl:11","category":"page"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"strain_and_stress::TimeDataType = 3","category":"page"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"# Import incomplete data\ndata_2 = importcsv(\"data_time.csv\", t_col=1, ϵ_col=2)\n# Check data type\nRheoTimeDataType(data_2)","category":"page"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"┌ Warning: Please note that NaN data rows are not included in resultant data struct.\n└ @ RHEOS /home/alessandra/.julia/dev/RHEOS/src/IO.jl:11","category":"page"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"strain_only::TimeDataType = 1","category":"page"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"The function importcsv can also be used to import frequency, storage modulus, and loss modulus data (as a complete set). In this case, the function returns a RheoFreqData object.","category":"page"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"# Import file\ndata_f = importcsv(\"data_freq.csv\", ω_col=1, Gp_col=2, Gpp_col=3)\n# Check data type\nRheoFreqDataType(data_f)","category":"page"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"┌ Warning: Please note that NaN data rows are not included in resultant data struct.\n└ @ RHEOS /home/alessandra/.julia/dev/RHEOS/src/IO.jl:11","category":"page"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"with_modulus::FreqDataType = 1","category":"page"},{"location":"fileIO/#Export-data-1","page":"File I/O","title":"Export data","text":"","category":"section"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"If you want to analyse or plot your data in software other than Julia you will likely want to export it to a CSV file. To export RheoTimeData and RheoFreqData objects to CSV files we can use the exportcsv function. For the two complete data-sets we imported above, we can export them into new files in the following way. As with importcsv, the order of the columns can be specified by the user.","category":"page"},{"location":"fileIO/#","page":"File I/O","title":"File I/O","text":"# Export file\nexportcsv(data_1,\"./export_timedata.csv\")\nexportcsv(data_f,\"./export_frequdata.csv\")","category":"page"},{"location":"architecture/#Architecture-1","page":"Architecture","title":"Architecture","text":"","category":"section"},{"location":"architecture/#","page":"Architecture","title":"Architecture","text":"RHEOS is built around four main data types:","category":"page"},{"location":"architecture/#","page":"Architecture","title":"Architecture","text":"RheoTimeData: Contains time (t), stress (σ), strain (ϵ) data\nRheoFreqData: Contains frequency (ω), storage (Gp) and loss (Gpp) moduli\nRheoModelClass: Contains the model's name, parameters, and the expressions of relaxation (G), creep (J), storage (Gp) and loss (Gpp) moduli as functions of the model parameters\nRheoModel: Similar to RheoModelClass, but actual numbers are substituted (hard-coded) into the expressions for relaxation, creep, storage and loss moduli.","category":"page"},{"location":"architecture/#","page":"Architecture","title":"Architecture","text":"A common RHEOS workflow is illustrated in the figure below. Experimental time-domain viscoelastic data is fitted to a viscoelastic model. This model (with the fitted parameters) is then used to make a prediction of the behaviour under the fitted loading conditions so that its accuracy can be qualitatively assessed. Similarly, the fitted model can be used to simulate the behaviour of the same material under any loading conditions (different from the fitted ones).","category":"page"},{"location":"architecture/#","page":"Architecture","title":"Architecture","text":"(Image: High level schematic of a fitting and prediction workflow from experimental data.)","category":"page"},{"location":"architecture/#","page":"Architecture","title":"Architecture","text":"So, having seen the figure above we can now think about our rheology data analysis workflow with reference to RHEOS' types and functions. Experimental data are imported into a RheoTimeData struct (or RheoFreqData for dynamic experimental data). This is then fitted to a RheoModelClass, which is the model struct used when the model's parameters are not fixed. The output of this process is a RheoModel (which is a RheoModelClass in which the parameters have been fixed to specific values). In the prediction step, the fitted RheoModel is combined with partial data (RheoTimeData with time and either only stress or strain) and fills in the missing data column, resulting in a complete data set (complete RheoTimeData).","category":"page"},{"location":"simulate/#Simulate-viscoelastic-models-1","page":"Simulate viscoelastic models","title":"Simulate viscoelastic models","text":"","category":"section"},{"location":"simulate/#","page":"Simulate viscoelastic models","title":"Simulate viscoelastic models","text":"RHEOS allows us to ","category":"page"},{"location":"burgers/#Burgers-(Liquid)-1","page":"Burgers","title":"Burgers (Liquid)","text":"","category":"section"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"using RHEOS\ninclude(\"plotmodel.jl\");","category":"page"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"BurgersLiquid","category":"page"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"Model name: burgerliquid\n\nFree parameters: η₁, k₁, η₂ and k₂\n\n\n                                                         ___\n                                                 _________| |________\n                 ___                            |        _|_| η₂     |\n             _____| |________╱╲  ╱╲  ╱╲  _______|                    |____\n                 _|_|          ╲╱  ╲╱  ╲╱       |                    |\n                    η₁                  k₁      |____╱╲  ╱╲  ╱╲  ____|\n                                                       ╲╱  ╲╱  ╲╱\n                                                                 k₂","category":"page"},{"location":"burgers/#Constitutive-equation-1","page":"Burgers","title":"Constitutive equation","text":"","category":"section"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"sigma(t) + p_1 fracd sigma(t)dt + p_2  fracd^2 sigma(t)dt^2 = q_1  fracd epsilon(t)dt + q_2  fracd^2 epsilon(t)dt^2","category":"page"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"where p_1 = fraceta_1k_1+fraceta_1k_2+fraceta_1k_2, p_2 = fraceta_1 eta_2k_1 k_2, q_1 =  eta_1 and q_2 = fraceta_1 eta_2k_2.","category":"page"},{"location":"burgers/#Relaxation-modulus-1","page":"Burgers","title":"Relaxation modulus","text":"","category":"section"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"G(t) = left left(q_1 - q_2 r_1right) e^-r_1 t  - left(q_1 - q_2 r_2right) e^-r_2 t rightA","category":"page"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"where r_1 = (p_1-A)2p_2, r_2 = (p_1 +A) 2p_2, and A = sqrtp_1^2 - 4p_2","category":"page"},{"location":"burgers/#Creep-modulus-1","page":"Burgers","title":"Creep modulus","text":"","category":"section"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"J(t) = frac1k_1 + fracteta_1 + frac1k_2 left(1-e^-k_2 teta_2right)","category":"page"},{"location":"burgers/#Storage-modulus-1","page":"Burgers","title":"Storage modulus","text":"","category":"section"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"G^prime(omega) = fracp_1 q_1 omega^2 - q_2 omega^2 (1-p_2 omega^2)p_1^2 omega^2 + (1-p_2 omega^2)^2","category":"page"},{"location":"burgers/#Loss-modulus-1","page":"Burgers","title":"Loss modulus","text":"","category":"section"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"G^prime prime(omega) = fracp_1 q_2 omega^3 + q_1 omega (1-p_2 omega^2)p_1^2 omega^2 + (1-p_2 omega^2)^2","category":"page"},{"location":"burgers/#Qualitative-behaviours-of-the-moduli-1","page":"Burgers","title":"Qualitative behaviours of the moduli","text":"","category":"section"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying k₁\nfor k in [0.5, 1.0, 2.0]\n    \n    push!(models,RheoModel(BurgersLiquid,(η₁ = 1, k₁ = k, η₂ = 1, k₂ = 1)))\n \nend\n\nplotmodel(models);","category":"page"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"(Image: png)","category":"page"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"(Image: png)","category":"page"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"Reference ","category":"page"},{"location":"burgers/#","page":"Burgers","title":"Burgers","text":"Findley, William N., and Francis A. Davis. Creep and relaxation of nonlinear viscoelastic materials. Courier Corporation, 2013.","category":"page"},{"location":"elements/#Springpot-1","page":"Basic Elements","title":"Springpot","text":"","category":"section"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"using RHEOS\ninclude(\"plotmodel.jl\");","category":"page"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"By typing the name of the model, it is possible to visualise its graphical representation and its parameters. ","category":"page"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"Springpot","category":"page"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"Model name: springpot\n\nFree parameters: cᵦ and β\n\n                ____ ╱╲ ____\n                     ╲╱  cᵦ, β","category":"page"},{"location":"elements/#Constitutive-equation-1","page":"Basic Elements","title":"Constitutive equation","text":"","category":"section"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"sigma(t) = c_beta fracd^beta epsilon(t)dt^beta","category":"page"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"for 0 leq beta leq 1","category":"page"},{"location":"elements/#Relaxation-modulus-1","page":"Basic Elements","title":"Relaxation modulus","text":"","category":"section"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"G(t) = fracc_beta Gamma(1-beta) t^-beta","category":"page"},{"location":"elements/#Creep-modulus-1","page":"Basic Elements","title":"Creep modulus","text":"","category":"section"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"J(t) = frac1c_beta Gamma(1+beta)t^beta","category":"page"},{"location":"elements/#Storage-modulus-1","page":"Basic Elements","title":"Storage modulus","text":"","category":"section"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"G^prime(omega) = c_beta omega^beta cos(fracpi2beta)","category":"page"},{"location":"elements/#Loss-modulus-1","page":"Basic Elements","title":"Loss modulus","text":"","category":"section"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"G^primeprime(omega) = c_beta omega^beta sin(fracpi2beta)","category":"page"},{"location":"elements/#Spring-1","page":"Basic Elements","title":"Spring","text":"","category":"section"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"When beta = 0 the springpot specialises to a spring","category":"page"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"Spring","category":"page"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"Model name: spring\n\nFree parameters: k\n\n                ___╱╲  ╱╲  ╱╲  ________\n                     ╲╱  ╲╱  ╲╱  k","category":"page"},{"location":"elements/#Dashpot-1","page":"Basic Elements","title":"Dashpot","text":"","category":"section"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"When beta = 1 the springpot specialises to a dashpot","category":"page"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"Dashpot","category":"page"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"Model name: dashpot\n\nFree parameters: η\n\n                 ___\n             _____| |_____\n                 _|_|\n                     η","category":"page"},{"location":"elements/#Qualitative-behaviours-of-the-moduli-1","page":"Basic Elements","title":"Qualitative behaviours of the moduli","text":"","category":"section"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"models = Vector{RheoModel}()\n\n# Spring\npush!(models, RheoModel(Spring, (k = 1.0,)))\n\n# plot moduli for varying β\nfor beta in [0.2, 0.5, 0.8]\n    \n    push!(models, RheoModel(Springpot,(cᵦ = 1.0, β = beta)))\n \nend\n\n# Dashpot\npush!(models, RheoModel(Dashpot, (η = 1.0,)))\n\nplotmodel(models, ymaxG = 2.0);","category":"page"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"(Image: png)","category":"page"},{"location":"elements/#","page":"Basic Elements","title":"Basic Elements","text":"(Image: png)","category":"page"},{"location":"fractionalMaxwell/#Fractional-Maxwell-1","page":"Maxwell","title":"Fractional Maxwell","text":"","category":"section"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"using RHEOS\ninclude(\"plotmodel.jl\");","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"Fract_Maxwell","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"Model name: fractmaxwell\n\nFree parameters: cₐ, a, cᵦ and β\n\n             ___╱╲__________╱╲____\n                ╲╱          ╲╱\n                  cₐ,a         cᵦ, β","category":"page"},{"location":"fractionalMaxwell/#Constitutive-equation-1","page":"Maxwell","title":"Constitutive equation","text":"","category":"section"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"sigma(t) + fracc_alphac_beta fracd^alpha-beta sigma(t)dt^alpha-beta= c_alpha fracd^alpha epsilon(t)dt^alpha","category":"page"},{"location":"fractionalMaxwell/#Relaxation-modulus-1","page":"Maxwell","title":"Relaxation modulus","text":"","category":"section"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"G(t) = c_beta t^-beta E_alpha-beta1-betaleft(-fracc_betac_alpha t^alpha-betaright)","category":"page"},{"location":"fractionalMaxwell/#Creep-modulus-1","page":"Maxwell","title":"Creep modulus","text":"","category":"section"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"J(t) = frac1c_alpha Gamma(1+alpha)t^alpha+frac1c_beta Gamma(1+beta)t^beta","category":"page"},{"location":"fractionalMaxwell/#Storage-modulus-1","page":"Maxwell","title":"Storage modulus","text":"","category":"section"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"G^prime(omega) = fracleft(c_beta omega^betaright)^2 cdot c_alpha omega^alpha cos(alpha fracpi2) + left(c_alpha omega^alpharight)^2 cdot c_beta omega^beta cos(beta fracpi2)left(c_alpha omega^alpharight)^2+left(c_beta omega^betaright)^2+2c_alpha omega^alpha cdot c_beta omega^beta cos((alpha-beta)fracpi2)","category":"page"},{"location":"fractionalMaxwell/#Loss-modulus-1","page":"Maxwell","title":"Loss modulus","text":"","category":"section"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"G^primeprime(omega) = fracleft(c_beta omega^betaright)^2 cdot c_alpha omega^alpha sin(alpha fracpi2) + left(c_alpha omega^alpharight)^2 cdot c_beta omega^beta sin(beta fracpi2)left(c_alpha omega^alpharight)^2+left(c_beta omega^betaright)^2+2c_alpha omega^alpha cdot c_beta omega^beta cos((alpha-beta)fracpi2)","category":"page"},{"location":"fractionalMaxwell/#Fractional-(Spring)-Maxwell-1","page":"Maxwell","title":"Fractional (Spring) Maxwell","text":"","category":"section"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"FractS_Maxwell","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"Model name: fractmaxwell_spring\n\nFree parameters: cₐ, a and k\n\n           ___╱╲_________╱╲  ╱╲  ╱╲  ________\n              ╲╱           ╲╱  ╲╱  ╲╱\n                cₐ,a               k","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying α\nfor alpha in [0.1, 0.3, 0.5, 0.7, 0.9]\n    \n    push!(models,RheoModel(FractS_Maxwell,(cₐ = 1.0, a = alpha, k = 1.0)))\n \nend\n\nplotmodel(models);","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"(Image: png)","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"(Image: png)","category":"page"},{"location":"fractionalMaxwell/#Fractional-(Dashpot)-Maxwell-1","page":"Maxwell","title":"Fractional (Dashpot) Maxwell","text":"","category":"section"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"FractD_Maxwell","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"Model name: fractmaxwell_dashpot\n\nFree parameters: η, cᵦ and β\n\n                  ___\n              _____| |_________╱╲____\n                  _|_|         ╲╱\n                    η            cᵦ, β","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying β\nfor beta in [0.1, 0.3, 0.5, 0.7, 0.9]\n    \n    push!(models,RheoModel(FractD_Maxwell,(η = 10, cᵦ= 1.0, β = beta)))\n \nend\n\nplotmodel(models, ymaxG = 2.0);\n","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"(Image: png)","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"(Image: png)","category":"page"},{"location":"fractionalMaxwell/#Maxwell-model-1","page":"Maxwell","title":"Maxwell model","text":"","category":"section"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"Maxwell","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"Model name: maxwell\n\nFree parameters: η and k\n\n                ___\n            _____| |________╱╲  ╱╲  ╱╲  ___\n                _|_|          ╲╱  ╲╱  ╲╱\n                  η                  k","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying k\nfor k in [5.0, 10.0, 20.0]\n    \n    push!(models,RheoModel(Maxwell,(η = 10, k = k)))\n \nend\n\nplotmodel(models);","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"(Image: png)","category":"page"},{"location":"fractionalMaxwell/#","page":"Maxwell","title":"Maxwell","text":"(Image: png)","category":"page"},{"location":"fractionalZener/#Fractional-Zener-1","page":"Zener","title":"Fractional Zener","text":"","category":"section"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"using RHEOS\ninclude(\"plotmodel.jl\");","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"Fract_Zener","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"Model name: frac_zener\n\nFree parameters: cₐ, a, cᵦ, β, cᵧ and γ\n\n\n                  ______╱╲__________╱╲______\n                 |      ╲╱          ╲╱      |\n          _______|      cₐ,a         cᵦ, β  |_______\n                 |                          |\n                 |____________╱╲____________|\n                              ╲╱\n                              cᵧ, γ","category":"page"},{"location":"fractionalZener/#Constitutive-equation-1","page":"Zener","title":"Constitutive equation","text":"","category":"section"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"sigma(t) + fracc_alphac_beta fracd^alpha-beta sigma(t)dt^alpha-beta= c_alpha fracd^alpha epsilon(t)dt^alpha + c_gamma fracd^gamma epsilon(t)dt^gamma+ fracc_alpha c_gammac_betafracd^alpha+gamma-beta epsilon(t)dt^alpha+gamma-beta","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"Assuming 0 leq beta leq alpha leq 1","category":"page"},{"location":"fractionalZener/#Relaxation-modulus-1","page":"Zener","title":"Relaxation modulus","text":"","category":"section"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"G(t) = c_beta t^-beta E_alpha-beta1-betaleft(-fracc_betac_alpha t^alpha-betaright) + fracc_gamma Gamma(1-gamma) t^-gamma","category":"page"},{"location":"fractionalZener/#Creep-modulus-1","page":"Zener","title":"Creep modulus","text":"","category":"section"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"tildeJ(s)= frac1sfracc_alpha s^alpha+c_beta s^betac_alpha s^alpha c_beta s^beta + c_gamma s^gamma (c_alpha s^alpha+c_beta s^beta)","category":"page"},{"location":"fractionalZener/#Storage-modulus-1","page":"Zener","title":"Storage modulus","text":"","category":"section"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"G^prime(omega) = fracleft(c_beta omega^betaright)^2 cdot c_alpha omega^alpha cos(alpha fracpi2) + left(c_alpha omega^alpharight)^2 cdot c_beta omega^beta cos(beta fracpi2)left(c_alpha omega^alpharight)^2+left(c_beta omega^betaright)^2+2c_alpha omega^alpha cdot c_beta omega^beta cos((alpha-beta)fracpi2) + c_gamma omega^gamma cosleft(gamma fracpi2right)","category":"page"},{"location":"fractionalZener/#Loss-modulus-1","page":"Zener","title":"Loss modulus","text":"","category":"section"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"G^primeprime(omega) = fracleft(c_beta omega^betaright)^2 cdot c_alpha omega^alpha sin(alpha fracpi2) + left(c_alpha omega^alpharight)^2 cdot c_beta omega^beta sin(beta fracpi2)left(c_alpha omega^alpharight)^2+left(c_beta omega^betaright)^2+2c_alpha omega^alpha cdot c_beta omega^beta cos((alpha-beta)fracpi2)+ c_gamma omega^gamma sinleft(gamma fracpi2right)","category":"page"},{"location":"fractionalZener/#Fractional-SLS-(Zener)-1","page":"Zener","title":"Fractional SLS (Zener)","text":"","category":"section"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"FractSLS_Zener","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"Model name: fracsls_Zener\n\nFree parameters: cₐ, a, kᵦ and kᵧ\n\n\n                _____╱╲_______╱╲  ╱╲  ╱╲  _____\n               |     ╲╱         ╲╱  ╲╱  ╲╱     |\n        _______|       cₐ,a              kᵦ    |_______\n               |                               |\n               |__________╱╲  ╱╲  ╱╲  _________|\n                            ╲╱  ╲╱  ╲╱\n                                 kᵧ","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying α\nfor alpha in [0.1, 0.25, 0.5, 0.74, 0.9]\n    \n    push!(models,RheoModel(FractSLS_Zener,(cₐ = 1, a = alpha, kᵦ = 1, kᵧ = 1)))\n \nend\n\nplotmodel(models);","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"(Image: png)","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"(Image: png)","category":"page"},{"location":"fractionalZener/#Fractional-Jeffreys-(Zener)-1","page":"Zener","title":"Fractional Jeffreys (Zener)","text":"","category":"section"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"FractJeffreys_Zener","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"Model name: fjeff_Zener\n\nFree parameters: ηₐ, cᵦ, β and ηᵧ\n\n\n                                    ___\n                            _________| |_________╱╲________\n                           |        _|_|         ╲╱        |\n                    _______|          ηₐ            cᵦ, β  |_______\n                           |              ___              |\n                           |_______________| |_____________|\n                                          _|_|\n                                             ηᵧ","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying β\nfor beta in [0.1, 0.25, 0.5, 0.74, 0.9]\n    \n    push!(models,RheoModel(FractJeffreys_Zener,(ηₐ = 1, cᵦ = 1, β = beta, ηᵧ = 1)))\n \nend\n\nplotmodel(models, ymaxG = 2.0);","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"(Image: png)","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"(Image: png)","category":"page"},{"location":"fractionalZener/#Standard-Linear-Solid-(Zener)-1","page":"Zener","title":"Standard Linear Solid (Zener)","text":"","category":"section"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"SLS_Zener","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"Model name: SLS_Zener\n\nFree parameters: η, kᵦ and kᵧ\n\n                      ___\n                  _____| |________╱╲  ╱╲  ╱╲  ___\n                 |    _|_|          ╲╱  ╲╱  ╲╱   |\n          _______|      η                  kᵦ    |_______\n                 |                               |\n                 |__________╱╲  ╱╲  ╱╲  _________|\n                              ╲╱  ╲╱  ╲╱\n                                   kᵧ","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying kᵦ\nfor k in [1.0, 3.0, 5.0]\n    \n    push!(models,RheoModel(SLS_Zener,(η = 1, kᵦ = k, kᵧ = 1)))\n \nend\n\nplotmodel(models);","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"(Image: png)","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"(Image: png)","category":"page"},{"location":"fractionalZener/#Jeffreys-(Zener)-1","page":"Zener","title":"Jeffreys (Zener)","text":"","category":"section"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"Jeffreys_Zener","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"Model name: jeffreys_Zener\n\nFree parameters: ηₐ, k and ηᵧ\n\n\n                              ___\n                        _______| |_______╱╲  ╱╲  ╱╲  ___\n                       |      _|_|         ╲╱  ╲╱  ╲╱  |\n                _______|          ηₐ            k      |_______\n                       |              ___              |\n                       |_______________| |_____________|\n                                      _|_|\n                                         ηᵧ","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying ηₐ\nfor eta in [1.0, 5.0, 8.0]\n    \n    push!(models,RheoModel(Jeffreys_Zener,(ηₐ = eta, k = 3, ηᵧ = 1)))\n \nend\n\nplotmodel(models);","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"(Image: png)","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"(Image: png)","category":"page"},{"location":"fractionalZener/#Fractional-Solid-1","page":"Zener","title":"Fractional Solid","text":"","category":"section"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"Reference: Bonfanti, A., Fouchard, J., Khalilgharibi, N., Charras, G., & Kabla, A. (2019). A unified rheological model for cells and cellularised materials. BioRxiv","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"FractSolid","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"Model name: fractsolid\n\nFree parameters: η, cᵦ, β and k\n\n                      ___\n                  _____| |__________╱╲__________\n                 |    _|_|          ╲╱          |\n             ___ |      η              cᵦ, β    |___\n                 |                              |\n                 |__________╱╲  ╱╲  ╱╲  ________|\n                              ╲╱  ╲╱  ╲╱\n                                k","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying β\nfor beta in [0.1, 0.25, 0.5, 0.74, 0.9]\n    \n    push!(models,RheoModel(FractSolid,(η = 1, cᵦ = 1, β = beta, k = 0.5)))\n \nend\n\nplotmodel(models, ymaxG = 2);","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"(Image: png)","category":"page"},{"location":"fractionalZener/#","page":"Zener","title":"Zener","text":"(Image: png)","category":"page"},{"location":"API/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"API/#Main-RHEOS-Structs-1","page":"API","title":"Main RHEOS Structs","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"RheoTimeData\nRheoFreqData\nRheoModelClass\nRheoModel","category":"page"},{"location":"API/#RHEOS.RheoTimeData","page":"API","title":"RHEOS.RheoTimeData","text":"RheoTimeData(;σ::Vector{T1}, ϵ::Vector{T2}, t::Vector{T3}) where {T1<:Real, T2<:Real, T3<:Real}\n\nRheoTimeData struct contains stress, strain and time data.\n\nIf preferred, an instance can be generated manually by just providing the three data vectors in the right order, sampling type will be checked automatically.\n\nFields\n\nσ: stress\nϵ: strain\nt: time\nlog: a log of struct's events, e.g. preprocessing\n\n\n\n\n\n","category":"type"},{"location":"API/#RHEOS.RheoFreqData","page":"API","title":"RHEOS.RheoFreqData","text":"RheoFreqData(Gp::Vector{T1}, Gpp::Vector{T2}, ω::Vector{T3}, log::OrderedDict{Any,Any}) where {T1<:Real, T2<:Real, T3<:Real}\n\nRheoFreqData contains storage modulus, loss modulus and frequency data.\n\nIf preferred, an instance can be generated manually by just providing the three data vectors in the right order.\n\nFields\n\nGp: storage modulus\nGpp: loss modulus\nω: frequency\nlog: a log of struct's events, e.g. preprocessing\n\n\n\n\n\n","category":"type"},{"location":"API/#RHEOS.RheoModelClass","page":"API","title":"RHEOS.RheoModelClass","text":"RheoModelClass(name::String, params::Vector{Symbol}, G::FunctionWrapper{RheoFloat,Tuple{RheoFloat,Array{RheoFloat,1}}}, Ga::FunctionWrapper{Array{RheoFloat,1},Tuple{Array{RheoFloat,1},Array{RheoFloat,1}}}, J::FunctionWrapper{RheoFloat,Tuple{RheoFloat,Array{RheoFloat,1}}}, Ja::FunctionWrapper{Array{RheoFloat,1},Tuple{Array{RheoFloat,1},Array{RheoFloat,1}}}, Gp::FunctionWrapper{RheoFloat,Tuple{RheoFloat,Array{RheoFloat,1}}}, Gpa::FunctionWrapper{Array{RheoFloat,1},Tuple{Array{RheoFloat,1},Array{RheoFloat,1}}}, Gpp::FunctionWrapper{RheoFloat,Tuple{RheoFloat,Array{RheoFloat,1}}}, Gppa::FunctionWrapper{Array{RheoFloat,1},Tuple{Array{RheoFloat,1},Array{RheoFloat,1}}}, constraint::FunctionWrapper{Bool,Tuple{Array{RheoFloat,1}}}, info::String, expressions::NamedTuple)\n\nRheoModelClass contains a model name, it's symbolic parameters and all its moduli (both single-input and array-input versions).\n\nIt also contains information about any constraints that must be observed (e.g. the springpot coefficient being inbetween 0 and 1).\n\nLastly, it also contains additional info about the model which may include a text-art schematic.\n\nGenerally, users will want to use the RheoModelClass constructor function as shown in the 'Create Your Model' section of the documentation rather than the default constructor.\n\n\n\n\n\n","category":"type"},{"location":"API/#RHEOS.RheoModel","page":"API","title":"RHEOS.RheoModel","text":"RheoModel(G::FunctionWrapper{RheoFloat,Tuple{RheoFloat}}, Ga::FunctionWrapper{Array{RheoFloat,1},Tuple{Array{RheoFloat,1}}}, J::FunctionWrapper{RheoFloat,Tuple{RheoFloat}}, Ja::FunctionWrapper{Array{RheoFloat,1},Tuple{Array{RheoFloat,1}}}, Gp::FunctionWrapper{RheoFloat,Tuple{RheoFloat}}, Gpa::FunctionWrapper{Array{RheoFloat,1},Tuple{Array{RheoFloat,1}}}, Gpp::FunctionWrapper{RheoFloat,Tuple{RheoFloat}}, Gppa::FunctionWrapper{Array{RheoFloat,1},Tuple{Array{RheoFloat,1}}}, expressions::NamedTuple)\n\nRheoModel contains all known moduli of a particular model, as for a RheoModelClass model name. However, a RheoModel has all it's parameters fixed to known values.\n\nGenerally, users will begin with a defined RheoModelClass (e.g. SLS) and then specialise the parameters, rather than calling the default constructor explicitly.\n\n\n\n\n\n","category":"type"},{"location":"API/#Sampling-and-Filtering-Functions-1","page":"API","title":"Sampling and Filtering Functions","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"resample\ncutting\nsmooth\nextract","category":"page"},{"location":"API/#RHEOS.resample","page":"API","title":"RHEOS.resample","text":"resample(self::RheoTimeData, elperiods::Union{Vector{K}, K}; time_boundaries::Union{Nothing, Vector{T}} = nothing)\n\nResample data with new sample rate(s).\n\nResample can downsample or upsample data. If the number of elperiods is negative it is going to reduce the number of samples, vice versa if it is positive. If time_boundaries are not specified, resampling is applied to the whole set of data. If number of elements per period (elperiods) is 1 or -1 it returns the original RheoTimeData, whilst 0 is not accepted as a valid argument for elperiods.\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.cutting","page":"API","title":"RHEOS.cutting","text":"cutting(self::RheoTimeData, time_on::T1, time_off::T2) where {T1<:Number, T2<:Number}\n\nRemove the data outside a specified time interval.\n\nBy specifing a time interval (time_on, time_off), a new RheoTimeData is returned without the data lying outside time interval.\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.smooth","page":"API","title":"RHEOS.smooth","text":"smooth(self::RheoTimeData, τ::Real; pad::String=\"reflect\")\n\nSmooth data using a Gaussian Kernel to time scale τ (approximately half power).\n\nSmooths both σ and ϵ. Sampling frequency must be constant as it is based on FFT convolution. Essentially a low pass filter with frequencies of 1/τ being cut to approximately half power. For other pad types available see ImageFiltering documentation. As of doc writing, pad options are: \"replicate\" (repeat edge values to infinity), \"circular\" (image edges \"wrap around\"), \"symmetric\" (the image reflects relative to a position between pixels), \"reflect\" (the image reflects relative to the edge itself).\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.extract","page":"API","title":"RHEOS.extract","text":"extract(self::Union{RheoTimeData,RheoFreqData}, type::Union{TimeDataType,FreqDataType,Integer})\n\nExtract specific fields form RheoTimeData or RheoFreqData.\n\nExtract can copy one or more fields from a given RheoXData variable into a new RheoXData one. The fields that are copied are identified by the specified type of data. If self is a RheoTimeData, the type that can be extracted is time_only (or 0), stress_only (or 1), strain_only (or 2). Note that strain_and_stress (or 3) is not allowed. If self is a RheoFreqData, the type that can be extracted is freq_only (or 0).\n\n\n\n\n\n","category":"function"},{"location":"API/#Fitting-and-Predicting-Functions-1","page":"API","title":"Fitting and Predicting Functions","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"modelfit\nmodelpredict\nmodelstepfit\nmodelsteppredict\ndynamicmodelfit\ndynamicmodelpredict\nfreeze_params","category":"page"},{"location":"API/#RHEOS.modelfit","page":"API","title":"RHEOS.modelfit","text":"modelfit(data::RheoTimeData, model::RheoModelClass, modloading::Symbol; p0::Union{NamedTuple,Nothing} = nothing, lo::Union{NamedTuple,Nothing} = nothing, hi::Union{NamedTuple,Nothing} = nothing, verbose::Bool = false, rel_tol = 1e-4, diff_method=\"BD\")\n\nFit RheologyData struct to model and return a fitted model as a RheologyModel object. For the fitting process RHEOS relies on the optimistion package NLopt.jl (https://nlopt.readthedocs.io/en/latest/). RHEOS makes use of a local derivative free algorithm, specifically the Tom Rowan's \"Subplex\"\n\nArguments\n\ndata: RheoTimeData struct containing all data\nmodel: RheoModelClass containing moduli functions and named tuple parameters\nmodloading: strain_imposed or 1, stress_imposed or 2\np0: Initial parameters to use in fit (uses 0.5 for all parameters if not defined)\nlo: Lower bounds for parameters\nhi: Upper bounds for parameters\nverbose: If true, prints parameters on each optimisation iteration\nrel_tol: Relative tolerance of optimization, see NLOpt docs for more details\ndiff_method: Set finite difference formula to use for derivative, currently \"BD\" or \"CD\"\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.modelpredict","page":"API","title":"RHEOS.modelpredict","text":"modelpredict(data::RheoTimeData, model::RheoModel; diff_method=\"BD\")\n\nGiven an incomplete data set (only either stress or strain missing) and model with values substituted into parameters (RheoModel), return a new dataset based on the model. If data is type of stress_only, then creep modulus (:J) is used; if data type is strain_only relaxation modulus (:G). A complete RheoTimeData of type strain_and_stress is returned. diff_method sets finite difference for calculating the derivative used in the hereditary integral and can be either backwards difference (\"BD\") or central difference (\"CD\").\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.modelstepfit","page":"API","title":"RHEOS.modelstepfit","text":"modelstepfit(data::RheoTimeData, model::RheoModelClass, modloading::Union{LoadingType,Integer}; step=nothing, p0::Union{NamedTuple,Nothing} = nothing, lo::Union{NamedTuple,Nothing} = nothing, hi::Union{NamedTuple,Nothing} = nothing, verbose::Bool = false, rel_tol = 1e-4) where T<:Real\n\nSame as modelfit except assumes a step loading. If this assumption is appropriate for the data then fitting can be sped up greatly by use of this function. If modloading is strain_imposed, relaxation modulus is used, then the element in the middle of the strain is assumed to be the amplitude of the step. If modloading is stress_imposed, the creep modulus is used, then the middle element of the stress is assumed to be the amplitude of the step. Alternatively, it is possible to define the value of the step by defining the optional step parameter.\n\nArguments\n\ndata: RheoTimeData struct containing all data\nmodel: RheoModelClass containing moduli and parameters tuples\nmodloading: strain_imposed for relaxation modulus, stress_imposed for creep modulus\np0: Named tuple of initial parameters to use in fit (uses 0.5 for all parameters if none given)\nlo: Named tuple of lower bounds for parameters\nhi: Named tuple of upper bounds for parameters\nverbose: If true, prints parameters on each optimisation iteration\nrel_tol: Relative tolerance of optimization, see NLOpt docs for more details\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.modelsteppredict","page":"API","title":"RHEOS.modelsteppredict","text":"modelsteppredict(data::RheoTimeData, model::RheoModel; step_on::Real = 0.0)\n\nSame as modelpredict but assumes a step loading with step starting at step_on. Singularities are bypassed by adding 1 to the index of the singular element.\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.dynamicmodelfit","page":"API","title":"RHEOS.dynamicmodelfit","text":"dynamicmodelfit(data::RheoFreqData, model::RheoModelClass; p0::Union{NamedTuple,Nothing} = nothing, lo::Union{NamedTuple,Nothing} = nothing, hi::Union{NamedTuple,Nothing} = nothing, verbose::Bool = false, rel_tol = 1e-4) where T<:Real\n\nFits model to the frequency/loss+storage moduli data.\n\nAll arguments are as described below. As this fitting procedure is fitting two functions simultaneously (the storage and loss moduli), if left untransformed the fit would tend to favour the modulus which is larger in magnitude and not fit the other modulus well. To avoid this, RHEOS offers a number of data transforms which can be used by changing weights argument.\n\nArguments\n\ndata: RheoFreqData struct containing all data\nmodel: RheoModelClass containing moduli and symbols of parameters\np0: Initial parameters to use in fit (uses 0.5 for all parameters if none given)\nlo: Lower bounds for parameters\nhi: Upper bounds for parameters\nverbose: If true, prints parameters on each optimisation iteration\nrel_tol: Relative tolerance of optimization, see NLOpt docs for more details\nweights: Weighting mode for storage and loss modulus (\"none\", \"mean\", \"log\", \"local\" or manually specified)\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.dynamicmodelpredict","page":"API","title":"RHEOS.dynamicmodelpredict","text":"dynamicmodelpredict(data::RheoFreqData, model::RheoModel)\n\nGiven dynamic rheology data with only frequency and model where parameters have been substituted. Returns another RheoFreqData instance with the predicted Gp and Gpp based on the frequencies and model given as arguments.\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.freeze_params","page":"API","title":"RHEOS.freeze_params","text":"freeze_params(m::RheoModelClass, nt0::NamedTuple)\n\nReturn a new RheoModelClass with some of the parameters frozen to specific values\n\nArguments\n\nm: original RheoModelClass\nnt0: named tuple with values for each parameter to freeze\n\nExample\n\njulia> SLS2_mod = freeze_params( SLS2, (G₀=2,η₂=3.5))\n[...]\n\njulia> SLS2.G(1,[2,1,2,3,3.5])\n3.8796492\n\njulia> SLS2_mod.G(1,[1,2,3])\n3.8796492\n\n\n\n\n\n","category":"function"},{"location":"API/#Data-Generation-Functions-1","page":"API","title":"Data Generation Functions","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"timeline\nstrainfunction\nstressfunction\nhstep\nramp\nstairs\nsquare\nsawtooth\ntriangle\nfrequencyspec","category":"page"},{"location":"API/#RHEOS.timeline","page":"API","title":"RHEOS.timeline","text":"timeline(;t_start::Real=0., t_end::Real=10., step::Real=(t_end - t_start)/250.)\n\nGenerate RheoTimeData struct with only the time data.\n\nArguments\n\nt_start: Starting time, typically 0\nt_end: End time\nstep: Time between sample\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.strainfunction","page":"API","title":"RHEOS.strainfunction","text":"strainfunction(data::RheoTimeData, f::T) where T<:Function\n\nAccepts a RheoTimeData and outputs a new RheoTimeData with a strain imposed. The strain signal is determined by the function provided, which should take time as its only argument. The original data's time signal is used.\n\nNormally used with a RheoTimeData generated using the timeline function.\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.stressfunction","page":"API","title":"RHEOS.stressfunction","text":"stressfunction(data::RheoTimeData, f::T) where T<:Function\n\nAccepts a RheoTimeData and outputs a new RheoTimeData with a stress imposed. The stress signal is determined by the function provided, which should take time as its only argument. The original data's time signal is used.\n\nNormally used with a RheoTimeData generated using the timeline function.\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.hstep","page":"API","title":"RHEOS.hstep","text":"hstep(t; offset=0., amp=1.)\n\nStep generation function for use with stressfunction or strainfunction. offset keyword arguent determines start of step. amp argument determines amplitude (height) of step.\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.ramp","page":"API","title":"RHEOS.ramp","text":"ramp(t; offset=0., gradient=1.)\n\nRamp signal generation function for use with stressfunction or strainfunction. offset keyword argument determines start of ramp. gradient argument determines the linear gradient of the ramp.\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.stairs","page":"API","title":"RHEOS.stairs","text":"stairs(t; offset=0., amp=1., width=1.)\n\nStairs signal generation function for use with stressfunction or strainfunction. Equivalent to additional steps being added every width seconds. offset keyword argument determines start of stairs signal. amp argument determines the height of each additional step.\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.square","page":"API","title":"RHEOS.square","text":"square(t; offset=0., amp=1., period=1., width=0.5*period)\n\nSquare signal generation function for use with stressfunction or strainfunction. offset keyword argument determines start of square signal. amp argument determines the height of each square pulse. period determines the period of one off/on section of the square wave signal. width determines the width of each square pulse.\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.sawtooth","page":"API","title":"RHEOS.sawtooth","text":"sawtooth(t; offset=0., amp=1., period=1.)\n\nSawtooth signal generation function for use with stressfunction or strainfunction. offset keyword argument determines start of sawtooth signal. amp argument determines the height of each sawtooth pulse. period determines the period of the sawtooth wave signal.\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.triangle","page":"API","title":"RHEOS.triangle","text":"triangle(t; offset=0., amp=1., period=1.)\n\nTriangle signal generation function for use with stressfunction or strainfunction. offset keyword argument determines start of triangle signal. amp argument determines the height of each triangle pulse. period determines the period of the triangle wave signal. width determines the width of the triangles.\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.frequencyspec","page":"API","title":"RHEOS.frequencyspec","text":"frequencyspec(;ω_start::Real=1.0e-2, ω_end::Real=1.0e2, step::Real=(ω_end-ω_start)/1.0e5)\n\nGenerate RheoFreqData struct with only the frequency data.\n\nArguments\n\nω_start: Starting time, typically 0\nω_end: End time\nstep: Step between frequencies\n\n\n\n\n\n","category":"function"},{"location":"API/#Data-IO-1","page":"API","title":"Data IO","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"importcsv\nexportcsv","category":"page"},{"location":"API/#RHEOS.importcsv","page":"API","title":"RHEOS.importcsv","text":"importcsv(filepath::String; t_col::IntOrNone = nothing, σ_col::IntOrNone = nothing, ϵ_col::IntOrNone = nothing, ω_col::IntOrNone = nothing, Gp_col::IntOrNone = nothing, Gpp_col::IntOrNone = nothing, delimiter=',')\n\nLoad data from a CSV file (two/three columns, comma seperated by default but delimiter can be specified in the delimiter keyword argument). Arguments must be identified by providing the number of the column in which they are contained.\n\nCan be used to construct either a RheoTimeData instance or a RheoFreqData instance. Function detects whether time or frequency has been included and proceeds accordingly. For oscillatory data, all three columns (Gp, Gpp, Frequency) must be provided. For regular viscoelastic data only time, or time-stress, or time-strain or time-stress-strain data can be provided.\n\n\n\n\n\n","category":"function"},{"location":"API/#RHEOS.exportcsv","page":"API","title":"RHEOS.exportcsv","text":"exportcsv(self::Union{RheoTimeData, RheoFreqData}, filedir::String; delimiter=',', colorder=nothing)\n\nExport RheoTimeData or RheoFreqData type to csv format. May be useful for plotting/analysis in other software. By default, full time data will be exported with columns ordered as (t, σ, ϵ). Partial time data will be ordered as either (t, σ) or (t, ϵ). Full frequency data will be ordered as (ω, Gp, Gpp). The order of columns can be customised by passing a NamedTuple to the colorder arguments. For example (σ = 1, t = 3, ϵ = 2) would export the columns in the order (σ, ϵ, t). As with importcsv, the delimiter can be set by keyword argument.\n\n\n\n\n\n","category":"function"},{"location":"fractionalPT/#Fractional-Poynting-Thomson-1","page":"Poynting-Thomson","title":"Fractional Poynting-Thomson","text":"","category":"section"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"using RHEOS\ninclude(\"plotmodel.jl\");","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"Fract_PT","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"Model name: fPT\n\nFree parameters: cₐ, a, cᵦ, β, cᵧ and γ\n\n                     _________╱╲_________\n                    |         ╲╱ cₐ, a   |\n                ____|                    |______╱╲____\n                    |                    |      ╲╱\n                    |_________╱╲_________|        cᵧ, γ\n                              ╲╱\n                                 cᵦ, β","category":"page"},{"location":"fractionalPT/#Constitutive-equation-1","page":"Poynting-Thomson","title":"Constitutive equation","text":"","category":"section"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"sigma(t) + fracc_alphac_gamma fracd^alpha-gamma sigma(t)dt^alpha-gamma+ fracc_betac_gamma fracd^beta-gamma sigma(t)dt^beta-gamma= c_alpha fracd^alpha epsilon(t)dt^alpha + c_beta fracd^beta epsilon(t)dt^beta","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"Assuming 0 leq beta leq alpha leq 1","category":"page"},{"location":"fractionalPT/#Relaxation-modulus-1","page":"Poynting-Thomson","title":"Relaxation modulus","text":"","category":"section"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"tildeG(s) = frac1sfracc_gamma s^gamma cdot leftc_alpha s^alpha + c_beta s^betarightc_gamma s^gamma+c_alpha s^alpha+c_beta s^beta","category":"page"},{"location":"fractionalPT/#Creep-modulus-1","page":"Poynting-Thomson","title":"Creep modulus","text":"","category":"section"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"J(t)= fract^alphac_alpha E_alpha-beta1+alphaleft(-fracc_betac_alpha t^alpha-betaright) + frac1c_gamma Gamma(1+gamma)t^gamma","category":"page"},{"location":"fractionalPT/#Storage-modulus-1","page":"Poynting-Thomson","title":"Storage modulus","text":"","category":"section"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"G^prime(omega) = fracc_gamma omega^gamma cosleft(gamma fracpi2right) leftleft(c_alpha omega^alpharight)^2+left(c_beta omega^betaright)^2 right+left(c_gamma omega^gammaright)^2 leftc_alpha omega^alpha cosleft(alpha fracpi2right)+c_beta omega^beta cosleft(beta fracpi2right) right + c_alpha omega^alpha cdot c_betaomega^beta cdot c_gamma omega^gamma leftcosleft((alpha-beta-gamma) fracpi2right)+cosleft((beta-alpha-gamma) fracpi2right) rightleft(c_alpha omega^alpharight)^2+left(c_beta omega^betaright)^2+left(c_gamma omega^gammaright)^2+2c_alpha omega^alpha cdot c_beta omega^beta cos((alpha-beta)fracpi2)+2c_alpha omega^alpha cdot c_gamma omega^gamma cos((alpha-gamma)fracpi2)+2c_beta omega^beta cdot c_gamma omega^gamma cos((beta-gamma)fracpi2)","category":"page"},{"location":"fractionalPT/#Loss-modulus-1","page":"Poynting-Thomson","title":"Loss modulus","text":"","category":"section"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"G^primeprime(omega) = fracc_gamma omega^gamma sinleft(gamma fracpi2right) leftleft(c_alpha omega^alpharight)^2+left(c_beta omega^betaright)^2 right+left(c_gamma omega^gammaright)^2 leftc_alpha omega^alpha sinleft(alpha fracpi2right)+c_beta omega^beta sinleft(beta fracpi2right) right + c_alpha omega^alpha cdot c_betaomega^beta cdot c_gamma omega^gamma leftsinleft((alpha-beta-gamma) fracpi2right)+sinleft((beta-alpha-gamma) fracpi2right) rightleft(c_alpha omega^alpharight)^2+left(c_beta omega^betaright)^2+left(c_gamma omega^gammaright)^2+2c_alpha omega^alpha cdot c_beta omega^beta cos((alpha-beta)fracpi2)+2c_alpha omega^alpha cdot c_gamma omega^gamma cos((alpha-gamma)fracpi2)+2c_beta omega^beta cdot c_gamma omega^gamma cos((beta-gamma)fracpi2)","category":"page"},{"location":"fractionalPT/#Fractional-SLS-(PT)-1","page":"Poynting-Thomson","title":"Fractional SLS (PT)","text":"","category":"section"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"FractSLS_PT","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"Model name: fSLS_PT\n\nFree parameters: cₐ, a, kᵦ and kᵧ\n\n                     _________╱╲_________\n                    |         ╲╱ cₐ, a   |\n                ____|                    |______╱╲  ╱╲  ╱╲  ____\n                    |                    |        ╲╱  ╲╱  ╲╱\n                    |____╱╲  ╱╲  ╱╲  ____|                   kᵧ\n                           ╲╱  ╲╱  ╲╱\n                                     kᵦ","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying α\nfor alpha in [0.1, 0.25, 0.5, 0.74, 0.9]\n    \n    push!(models,RheoModel(FractSLS_PT,(cₐ = 1, a = alpha, kᵦ = 1, kᵧ = 1)))\n \nend\n\nplotmodel(models);","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"(Image: png)","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"(Image: png)","category":"page"},{"location":"fractionalPT/#Fractional-Jeffreys-(PT)-1","page":"Poynting-Thomson","title":"Fractional Jeffreys (PT)","text":"","category":"section"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"FractJeffreys_PT","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"Model name: fjeff_PT\n\nFree parameters: ηₐ, cᵦ, β and ηᵧ\n\n                                      ___\n                              _________| |________\n                             |        _|_| ηₐ     |        ___\n                         ____|                    |_________| |_____\n                             |                    |        _|_| ηᵧ\n                             |_________╱╲_________|\n                                       ╲╱\n                                          cᵦ, β","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying β\nfor beta in [0.1, 0.25, 0.5, 0.74, 0.9]\n    \n    push!(models,RheoModel(FractJeffreys_PT,(ηₐ = 1, cᵦ = 1, β = beta, ηᵧ = 1)))\n \nend\n\nplotmodel(models, ymaxG = 0.5);","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"(Image: png)","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"(Image: png)","category":"page"},{"location":"fractionalPT/#Standard-Linear-Solid-(PT)-1","page":"Poynting-Thomson","title":"Standard Linear Solid (PT)","text":"","category":"section"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"SLS_PT","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"Model name: SLS_PT\n\nFree parameters: η, kᵦ and kᵧ\n\n                             ___\n                     _________| |________\n                    |        _|_| η      |\n                ____|                    |______╱╲  ╱╲  ╱╲  ____\n                    |                    |        ╲╱  ╲╱  ╲╱\n                    |____╱╲  ╱╲  ╱╲  ____|                   kᵧ\n                           ╲╱  ╲╱  ╲╱\n                                     kᵦ","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying kᵦ\nfor k in [1.0, 3.0, 5.0]\n    \n    push!(models,RheoModel(SLS_PT,(η = 1, kᵦ = k, kᵧ = 1)))\n \nend\n\nplotmodel(models);","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"(Image: png)","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"(Image: png)","category":"page"},{"location":"fractionalPT/#Jeffreys-(PT)-1","page":"Poynting-Thomson","title":"Jeffreys (PT)","text":"","category":"section"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"Jeffreys_PT","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"Model name: jeffreys_PT\n\nFree parameters: ηₐ, k and ηᵧ\n\n                             ___\n                     _________| |________\n                    |        _|_| ηₐ     |        ___\n                ____|                    |_________| |_____\n                    |                    |        _|_| ηᵧ\n                    |____╱╲  ╱╲  ╱╲  ____|\n                           ╲╱  ╲╱  ╲╱\n                                     k","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying ηₐ\nfor eta in [1.0, 5.0, 8.0]\n    \n    push!(models,RheoModel(Jeffreys_PT,(ηₐ = eta, k = 3, ηᵧ = 1)))\n \nend\n\nplotmodel(models);","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"(Image: png)","category":"page"},{"location":"fractionalPT/#","page":"Poynting-Thomson","title":"Poynting-Thomson","text":"(Image: png)","category":"page"},{"location":"fractionalKelvinVoigt/#Fractional-Kelvin-Voigt-1","page":"Kelvin-Voigt","title":"Fractional Kelvin-Voigt","text":"","category":"section"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"using RHEOS\ninclude(\"plotmodel.jl\");","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"Fract_KelvinVoigt","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"Model name: fractKV\n\nFree parameters: cₐ, a, cᵦ and β\n\n                ________ ╱╲ ________\n               |         ╲╱  cₐ, a  |\n           ____|                    |____\n               |                    |\n               |________ ╱╲ ________|\n                         ╲╱  cᵦ, β","category":"page"},{"location":"fractionalKelvinVoigt/#Constitutive-equation-1","page":"Kelvin-Voigt","title":"Constitutive equation","text":"","category":"section"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"sigma(t) = c_alpha fracd^alpha epsilon(t)dt^alpha+ c_beta fracd^beta epsilon(t)dt^beta","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"Assuming 0 leq beta leq alpha leq 1","category":"page"},{"location":"fractionalKelvinVoigt/#Relaxation-modulus-1","page":"Kelvin-Voigt","title":"Relaxation modulus","text":"","category":"section"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"G(t) =fracc_alpha Gamma(1-alpha) t^-alpha+fracc_beta Gamma(1-beta) t^-beta","category":"page"},{"location":"fractionalKelvinVoigt/#Creep-modulus-1","page":"Kelvin-Voigt","title":"Creep modulus","text":"","category":"section"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"J(t) = fract^alphac_alpha E_alpha-beta1+alphaleft(-fracc_betac_alpha t^alpha-betaright)","category":"page"},{"location":"fractionalKelvinVoigt/#Storage-modulus-1","page":"Kelvin-Voigt","title":"Storage modulus","text":"","category":"section"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"G^prime(omega) = c_alpha omega^alpha cosleft(alpha fracpi2right) + c_beta omega^beta cos left( beta fracpi2right)","category":"page"},{"location":"fractionalKelvinVoigt/#Loss-modulus-1","page":"Kelvin-Voigt","title":"Loss modulus","text":"","category":"section"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"G^primeprime(omega) = c_alpha omega^alpha sinleft(alpha fracpi2right) + c_beta omega^beta sin left( beta fracpi2right)","category":"page"},{"location":"fractionalKelvinVoigt/#Fractional-(Spring)-Kelvin-Voigt-1","page":"Kelvin-Voigt","title":"Fractional (Spring) Kelvin-Voigt","text":"","category":"section"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"FractS_KelvinVoigt","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"Model name: fractSpringKV\n\nFree parameters: cₐ, a and k\n\n                ________ ╱╲ ________\n               |         ╲╱  cₐ, a  |\n           ____|                    |____\n               |                    |\n               |____╱╲  ╱╲  ╱╲  ____|\n                      ╲╱  ╲╱  ╲╱\n                                k","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying α\nfor alpha in [0.1, 0.3, 0.5, 0.7, 0.9]\n    \n    push!(models,RheoModel(FractS_KelvinVoigt,(cₐ = 1.0, a = alpha, k = 1.0)))\n \nend\n\nplotmodel(models, ymaxG = 5.0);","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"(Image: png)","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"(Image: png)","category":"page"},{"location":"fractionalKelvinVoigt/#Fractional-(Dashpot)-Kelvin-Voigt-1","page":"Kelvin-Voigt","title":"Fractional (Dashpot) Kelvin-Voigt","text":"","category":"section"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"FractD_KelvinVoigt","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"Model name: fractDashpotKV\n\nFree parameters: η, cᵦ and β\n\n                        ___\n                _________| |________\n               |        _|_| η      |\n           ____|                    |____\n               |                    |\n               |________ ╱╲ ________|\n                         ╲╱  cᵦ, β","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying β\nfor beta in [0.1, 0.3, 0.5, 0.7, 0.9]\n    \n    push!(models,RheoModel(FractD_KelvinVoigt,(η = 10, cᵦ= 1.0, β = beta)))\n \nend\n\nplotmodel(models, ymaxG = 3.0);\n","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"(Image: png)","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"(Image: png)","category":"page"},{"location":"fractionalKelvinVoigt/#Kelvin-Voigt-model-1","page":"Kelvin-Voigt","title":"Kelvin-Voigt model","text":"","category":"section"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"KelvinVoigt","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"Model name: KV\n\nFree parameters: η and k\n\n                        ___\n                _________| |________\n               |        _|_| η      |\n           ____|                    |____\n               |                    |\n               |____╱╲  ╱╲  ╱╲  ____|\n                      ╲╱  ╲╱  ╲╱\n                                k","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"models = Vector{RheoModel}()\n\n# plot moduli for varying k\nfor η in [0.1, 1.0, 5.0]\n    \n    push!(models,RheoModel(KelvinVoigt,(η = η, k = 1)))\n \nend\n\nplotmodel(models);","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"(Image: png)","category":"page"},{"location":"fractionalKelvinVoigt/#","page":"Kelvin-Voigt","title":"Kelvin-Voigt","text":"(Image: png)","category":"page"},{"location":"examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"using RHEOS","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"PyPlot needs to be installed to run these examples and display plots of the data.","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"using PyPlot","category":"page"},{"location":"examples/#Example-1-1","page":"Examples","title":"Example 1","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Loading experimental data from csv file\nFitting model\nComparing original data with fit","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"# Make sure the examples folder is the current directory\n# check by typing \"pwd()\"\n\n# Import data\ndata = importcsv(\"example1_data.csv\", t_col=1, ϵ_col=2, σ_col=3)\n\n# Plot data\nplot(data.t,data.σ,\".\", color = \"green\")\nplot(data.t,data.ϵ,\"-\", color = \"blue\")\nylabel(\"Strain (blue), Stress (green)\");\nxlabel(\"Time\");\n\n# We now fit a Maxwell model\nmaxwell_model = modelfit(data, Maxwell, strain_imposed);","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"┌ Warning: Please note that NaN data rows are not included in resultant data struct.\n└ @ RHEOS /home/ab2425/.julia/dev/RHEOS/src/IO.jl:11\n┌ Warning: Initial values for model parameters is set to [0.5, 0.5] by default\n└ @ RHEOS /home/ab2425/.julia/dev/RHEOS/src/processing.jl:212","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"(Image: png)","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Time: 3.157080565 s, Why: XTOL_REACHED, Parameters: [4.0054, 2.003], Error: 0.022310985023644047","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Note that the fitting function requires guidance regarding the type of testing used. It helps optimise the fitting process.","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"The data in this example is the stress response to a strain ramp followed by plateau. It therefore corresponds to a strain imposed process.","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"We now want to calculate the stress values predicted by the model given the experimental strain data. Lets create a new data set with the strain profile","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"maxwell_predict = extract(data, strain_only)\n# and calculate the stress based on the model\nmaxwell_predict = modelpredict(maxwell_predict, maxwell_model)\n# Now we can plot data and model together for comparison\n\n# Plot data\nplot(data.t,data.σ,\".\", color = \"green\")\nplot(maxwell_predict.t,maxwell_predict.σ, color = \"red\");\nxlabel(\"Time\");\nylabel(\"Stress\");","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"(Image: png)","category":"page"},{"location":"examples/#Example-2-1","page":"Examples","title":"Example 2","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"This script is a slight modification of Example 1 to present to the user the possibility of creating new RheoModelClass from an existing one with some of the parameters frozen to specific values. As an example, we fix the spring constant of the model above (k) to 2 and we let RHEOS fit the viscosity eta.","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Maxwell_springFix = freeze_params(Maxwell, (k=2,))","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Model name: maxwell with set parameters: (k = 2.0,)\n\nFree parameters: η\n\n                ___\n            _____| |________╱╲  ╱╲  ╱╲  ___\n                _|_|          ╲╱  ╲╱  ╲╱\n                  η                  k","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"maxwellD_model = modelfit(data, Maxwell_springFix, strain_imposed)\nmaxwellD_predict = extract(data, strain_only)\n# and calculate the stress based on the model\nmaxwellD_predict = modelpredict(maxwellD_predict, maxwellD_model)\n# Now we can plot data and model together for comparison\n\n# Plot data\nplot(data.t,data.σ,\".\", color = \"green\")\nplot(maxwellD_predict.t,maxwellD_predict.σ, color = \"red\");\nxlabel(\"Time\");\nylabel(\"Stress\");","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"┌ Warning: Initial values for model parameters is set to [0.5] by default\n└ @ RHEOS /home/ab2425/.julia/dev/RHEOS/src/processing.jl:212","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"(Image: png)","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Time: 0.00937476 s, Why: XTOL_REACHED, Parameters: [4.00555], Error: 0.022412669261910358","category":"page"},{"location":"examples/#Example-3-1","page":"Examples","title":"Example 3","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"This script shows how to use RHEOS to explore the behaviour of various models This involves:","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Creating a strain function\nDefining models based on parameter values","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"PyPlot needs to be installed to run these examples and display plots of the data.","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"# Creates a time only dataset\ndϵ=timeline()\n# calculates strain data by applying a function of time\ndϵ=strainfunction(dϵ,t->sin(t))\n\n# Plot strain data\nplot(dϵ.t,dϵ.ϵ,\"--b\")\n\n\n# we can now simulate various models based on this strain only dataset\n# Let's study the role of the dashpot strength in the MAxwell model\nfor η in [0.1, 0.3, 1, 3, 10]\n    maxwell_model = RheoModel(Maxwell, k = 2., η = η)\n    d_maxwell = modelpredict(dϵ, maxwell_model)\n    plot(d_maxwell.t,d_maxwell.σ)\nend\nxlabel(\"Time\")\nylabel(\"Stress\")\ngrid(\"on\")","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"(Image: png)","category":"page"},{"location":"generatingdata/#Generating-Data-1","page":"Generating Data","title":"Generating Data","text":"","category":"section"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"RHEOS has several convenience functions for generating arbitrarily complex loading patterns. These may be particularly useful for investigating the responses of viscoelastic models that users may be unfamiliar with. ","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"using RHEOS\nusing PyPlot","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"Step 1: Generate timeline","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"The first step requires the generation of a RheoTimeData struct with only the time data. This is achieved with the timeline function. If no parameter is specified, it generates a time data from (t_start =0) to (t_end=10), with a default time step of (t_start-t_end)/250 = 0.04.","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"datat = timeline(t_start=0, t_end=20.0, step = 0.02)\nRheoTimeDataType(datat)","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"time_only::TimeDataType = 0","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"Note that the same functionality is provided to generate a frequency spectrum by using frequencyspec (see an example of its usage in the Fitting and Predicting - Frequency data section).","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"Step 2: Generate stress or strain data","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"The user can decide either to generate strain data (strainfunction function) or stress data (stressfunction function). Both functions require a RheoTimeData with time data defined and a function that takes the time as an input to generate the desired set of data. Both function return a new RheoTimeData struct with time data and either stress or strain data. Below is an example.","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"# calculates strain data by applying a function of time\ndsin=strainfunction(datat,t->sin(2*t));\n\nfig, ax = subplots(1,1, figsize=(8,2));\nplot(dsin.t,dsin.ϵ);\nRheoTimeDataType(dsin)","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"(Image: png)","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"strain_only::TimeDataType = 1","category":"page"},{"location":"generatingdata/#Pre-defined-functions-1","page":"Generating Data","title":"Pre-defined functions","text":"","category":"section"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"RHEOS provides some functions that can be directly applied to a timeline. Below is the complete list with examples. Note that if the keyword arguments for the functions are not defined, default parameters are used (see the API section). In the examples below the strain data is generated, the same can be applied to the stress by replacing strainfunction with stressfunction. ","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"fig, ax = subplots(2,3, figsize=(14,7));\n\n# Step generation\ndstep = strainfunction(datat,hstep(offset=5.0,amp=5));\n    # Plotting\n    ax[1,1].plot(dstep.t,dstep.ϵ);\n    ax[1,1].set_ylim(bottom = -0.1, top=5.4);\n    ax[1,1].set_title(\"Step\");\n\n# Ramp generation\ndramp = strainfunction(datat,ramp(offset=2.0,gradient=0.8));\n    ax[1,2].plot(dramp.t,dramp.ϵ);\n    ax[1,2].set_ylim(bottom = -0.1);\n    ax[1,2].set_title(\"Ramp\");\n\n# Stairs generation\ndstairs = strainfunction(datat,stairs(offset=5.0,amp=0.1,width=1));\n    ax[1,3].plot(dstairs.t,dstairs.ϵ);\n    ax[1,3].set_ylim(bottom = -0.1);\n    ax[1,3].set_title(\"Stairs\");\n\n# Square generation\ndsquare = strainfunction(datat,square(offset=5.0,amp=0.5,period=4, width=1));\n    ax[2,1].plot(dsquare.t,dsquare.ϵ);\n    ax[2,1].set_ylim(bottom = -0.05, top=0.6);\n    ax[2,1].set_title(\"Square\");\n\n# Sawtooth generation\ndsawtooth = strainfunction(datat,sawtooth(offset=5.0,amp=2,period=5));\n    ax[2,2].plot(dsawtooth.t,dsawtooth.ϵ);\n    ax[2,2].set_ylim(bottom = -0.1, top=2.2);\n    ax[2,2].set_title(\"Sawtooth\");\n\n# Triangle generation\ndtriangle = strainfunction(datat,triangle(offset=4.0,amp=1,period=4));\n    ax[2,3].plot(dtriangle.t,dtriangle.ϵ);\n    ax[2,3].set_ylim(bottom = -0.1, top=1.2);\n    ax[2,3].set_title(\"Tringle\");","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"(Image: png)","category":"page"},{"location":"generatingdata/#More-complex-patterns-1","page":"Generating Data","title":"More complex patterns","text":"","category":"section"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"More complicated patterns can be generated by making use of the possibility to add, subtract, multiply RheoTimeData structs. Note that addition and subtraction can be performed only if the data have the same sample rate.","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"fig, ax = subplots(1,3,figsize=(14,4));\n\n# Ramp & hold\ndhold = dramp - strainfunction(datat,ramp(offset=5.0,gradient=0.8));\n    ax[2].plot(dhold.t,dhold.ϵ);\n    ax[2].set_ylim(bottom = -0.1, top=2.8);\n    ax[2].set_title(\"Ramp & hold\");\n\n# Step with oscillatory loading\ndoscil = dstep + dsquare;\n    ax[1].plot(doscil.t,doscil.ϵ);\n    ax[1].set_ylim(bottom = -0.5, top=6);\nax[1].set_title(\"Oscillations\");\n\n# Ramp & hold & oscillation\ndcomplex = dhold + dsquare\n    ax[3].plot(dcomplex.t,dcomplex.ϵ);\n    ax[3].set_ylim(bottom = -0.1, top=3.2);\n    ax[3].set_title(\"Ramp & hold & oscillations\");","category":"page"},{"location":"generatingdata/#","page":"Generating Data","title":"Generating Data","text":"(Image: png)","category":"page"},{"location":"#RHEOS-RHEology-Open-Source-1","page":"Home","title":"RHEOS - RHEology Open Source","text":"","category":"section"},{"location":"#Summary-1","page":"Home","title":"Summary","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Rheology is the science of deformation and flow, with a focus on materials that do not exhibit simple linear elastic or viscous Newtonian behaviours. Rheology plays an important role in the empirical characterisation of soft viscoelastic materials commonly found in the food and cosmetics industry, as well as in biology and bioengineering. A broad range of theoretical tools exist to extract material parameters and interpret them thanks to data analysis and/or physical modelling.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"RHEOS (RHEology, Open-Source) is a software package designed to make the analysis of rheological data simpler, faster and more reproducible. RHEOS is currently limited to the broad family of linear viscoelastic models. A particular strength of the library is its ability to handle rheological models containing fractional derivatives which have demonstrable utility for the modelling of biological materials but have hitherto remained in relative obscurity – possibly due to their mathematical and computational complexity. RHEOS is written in Julia, which greatly assists achievement of our aims as it provides excellent computational efficiency and approachable syntax. RHEOS is fully documented and has extensive testing coverage.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"It should be noted that RHEOS is not an optimisation package. It builds on another optimisation package, NLopt, by adding a large number of abstractions and functionality specific to the exploration of viscoelastic data.","category":"page"},{"location":"#Statement-of-Need-1","page":"Home","title":"Statement of Need","text":"","category":"section"},{"location":"#Arbitrary-stress-strain-curves-and-broad-relaxation-spectra-require-advanced-software-1","page":"Home","title":"Arbitrary stress-strain curves and broad relaxation spectra require advanced software","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A large majority of scientists and engineers who undertake rheological experiments fit their data with one or several viscoelastic models in order to classify materials, quantify their behaviour and predict their response to external perturbations.","category":"page"},{"location":"#Learning-about-rheology-is-facilitated-by-the-ability-to-explore-a-large-database-of-models-1","page":"Home","title":"Learning about rheology is facilitated by the ability to explore a large database of models","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Obtaining intuition for fractional viscoelastic theory can be difficult and learning material is sparse. Tools are needed to support researchers with their exploration of standard and advanced models and how they behave in response to idealised loading conditions, in particular when analytical expressions are difficult to obtain.","category":"page"},{"location":"#Extracting-parameters-and-comparing-models-and-systems-require-standardised-tools-1","page":"Home","title":"Extracting parameters and comparing models and systems require standardised tools","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Because understanding of materials is often dependent on summarising their behaviour with a model, one must be able to test and compare a broad range of models to inform model selection and reliably identify material parameters. There are currently very limited options available in the public domain, and most research groups have to invest significant effort developing custom software. An open-source standardised library of models and fitting algorithms would support the rheology research community and make analysis more systematic, transparent and reproducible.","category":"page"},{"location":"#Features-1","page":"Home","title":"Features","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"RHEOS addresses the issues outlined in the Statement of Need in several ways.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"As well as being able to fit and predict assuming step loading of stress or strain, RHEOS can handle arbitrary loading for non-singular and singular models, and for constant or variable sample rates.\nRHEOS includes an extensive library of both traditional and fractional viscoelastic models. Although this library will satisfy most users, it is also straightforward to add additional models to RHEOS should they need to.\nFor intuition-building and model exploration, RHEOS includes signal generation features so that common loading patterns (e.g. step, ramp, stairs) can be applied to unfamiliar models.\nAs a convenience to the user, RHEOS also includes easy-to-use CSV importing and exporting functions, as well as a number of preprocessing functions for resampling and smoothing.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"All of the above features are linked together in a seamless interface intended to be very approachable for less experienced programmers. The different paradigms of creep, relaxation and oscillatory testing are all accounted for, and models fitted against one type of data can be used to predict against a different type of data. (For instance, fitting against relaxation data and predicting the frequency response spectrum.)","category":"page"},{"location":"#Documentation-1","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The sections in this documentation each aim to provide tutorials in different elements of RHEOS. The API section is a comprehensive list of RHEOS types and functions, and brief descriptions of their use. For corrections or further questions, please note the Contributing to RHEOS section below and create an issue on the GitHub repository. Note that whenever you restart your Julia session you will have to reload RHEOS by typing using RHEOS, to avoid repetition this line is not included in every piece of example code.  Any plotting library can be used but the tutorials within this documentation uses the PyPlot Julia package.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Note that all sections in this documentation are compiled from Jupyter notebooks (located in RHEOS/examples/) that can be locally modified to explore the functionalities offered by RHEOS (Apart from API and Architecture sections.)","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Install Julia, version 1.1.1\nFrom Julia REPL, enter pkg mode by pressing ]\n(Optional) Enable desired Project.toml environment\nRun the command add \"https://github.com/JuliaRheology/RHEOS.jl\"","category":"page"},{"location":"#Embedded-Dependencies-1","page":"Home","title":"Embedded Dependencies","text":"","category":"section"},{"location":"#[MittagLeffler.jl](https://github.com/jlapeyre/MittagLeffler.jl)-1","page":"Home","title":"MittagLeffler.jl","text":"","category":"section"},{"location":"#Contributing-to-RHEOS-1","page":"Home","title":"Contributing to RHEOS","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you believe you have found any bugs or invalid behaviour in RHEOS, please feel free to file an issue on this repository. You can also raise an issue if you feel that any part of the documentation needs clarification, or for any feature requests. Even better than just raising an issue, you could both raise an issue and issue a pull request which fixes that issue. Note that meta-documentation on running tests and building documentation locally is available at the JuliaRheology/RheoHelpDocs repository. Please be aware that RHEOS is released with a Contributor Code of Conduct and by participating in this project you agree to abide by its terms.","category":"page"},{"location":"#Citation-1","page":"Home","title":"Citation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you use RHEOS in your work, please consider citing the following paper TBA","category":"page"},{"location":"#References-1","page":"Home","title":"References","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"W. N. Findley, J. S. Lai, K. Onaran — Creep and Relaxation of Nonlinear Viscoelastic Materials (with an Introduction to Linear Viscoelasticity), Dover Publications, New York. (1976)\nS. G. Johnson — The NLopt nonlinear-optimization package, https://github.com/stevengj/nlopt\nJ. Bezanson, A. Edelman, S. Karpinski, V. B. Shah — Julia: A Fresh Approach to Numerical Computing, SIAM Review, doi: 10.1137/141000671. (2017)","category":"page"},{"location":"createmodel/#Create-your-model-1","page":"Create Your Model","title":"Create your model","text":"","category":"section"},{"location":"createmodel/#","page":"Create Your Model","title":"Create Your Model","text":"RHEOS provide an extensive model library (see Models section). However, if you would like to use a model that has not already been implemented in RHEOS, you can quickly define your own model as described below. Note that currently RHEOS can only handle linear viscoelastic models. Therefore, any added model must satisfy this condition. ","category":"page"},{"location":"createmodel/#","page":"Create Your Model","title":"Create Your Model","text":"The RheoModelClass constructor does not need to contain all moduli functions, depending on what variables are fitted and predicted down the line (relaxation modulus G for stress, creep function J for strain, and complex moduli Gp and Gpp for frequency domain data). As an example, we will assume that only the relaxation modulus is known.","category":"page"},{"location":"createmodel/#","page":"Create Your Model","title":"Create Your Model","text":"using RHEOS\nusing PyPlot","category":"page"},{"location":"createmodel/#","page":"Create Your Model","title":"Create Your Model","text":"PowerLawEmpirical =  RheoModelClass(\n                        # Model name\n                        name=\"power_empirical\",\n                        # Model parameters,\n                        p = [:A, :α],\n                        # Relaxation modulus\n                        G = quote\n                                A*t.^(-α)\n                            end,\n                        # Network\n                        info= \"Empirical model\"\n                        )","category":"page"},{"location":"createmodel/#","page":"Create Your Model","title":"Create Your Model","text":"Model name: power_empirical\n\nFree parameters: A and α\nEmpirical model","category":"page"},{"location":"createmodel/#","page":"Create Your Model","title":"Create Your Model","text":"# generate timeline\ndϵ=timeline()\n# calculates strain data by applying a function of time\ndϵ=strainfunction(dϵ,hstep())\n\n# Fix model parameters\npowermodel = RheoModel(PowerLawEmpirical, (A = 1, α = 0.8))\n\n# Evaluate relaxation response\ndpower = modelpredict(dϵ, powermodel)\n\nfig, ax = subplots(1,1, figsize=(3,3));\nax.loglog(dpower.t,dpower.σ)\nax.set_xlabel(\"Time\")\nax.set_ylabel(\"Stress\")\nax.set_ylim(bottom =0.1, top = 20)\nax.grid(\"on\")","category":"page"},{"location":"createmodel/#","page":"Create Your Model","title":"Create Your Model","text":"(Image: png)","category":"page"},{"location":"createmodel/#","page":"Create Your Model","title":"Create Your Model","text":"In a similar way, it is possible to define a model with only creep modulus. In this case, only strain can be fitted/predicted. ","category":"page"},{"location":"fitpredictTime/#Fitting-and-Predicting-Time-data-1","page":"Time data","title":"Fitting and Predicting - Time data","text":"","category":"section"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"A large majority of scientists and engineers who undertanke rheological experiments would fit their data with one or several viscoelastic models in order to classify materials, quantify their behaviour and predict their response to external perturbations.","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Standard linear viscoelastic models take the form of an ordinary differential equation between stress sigma and strain epsilon. Fitting models and predicting their response in the time domain then requires computing viscoelastic hereditary integrals such as:","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":" sigma(t) = int_0^t G(t - tau) fracd epsilon(tau)d tau d tau ","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"where G is the relaxation response (stress response to a step in strain) of the material, which can be analytically or numerically defined for each rheological model and its set of rheological parameters. A similar relation exists to calculate the strain from the stress history","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":" epsilon(t) = int_0^t J(t - tau) fracd sigma(tau)d tau d tau ","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"where J is the creep modulus of the material. Fitting and predicting behaviour then becomes non-trivial and standardised tools to process are needed.","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"using RHEOS","category":"page"},{"location":"fitpredictTime/#Fitting-1","page":"Time data","title":"Fitting","text":"","category":"section"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Step 1: Loading of the experimental data","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"RHEOS has a convenient function to import data from CSV files (more information in File I/O section).","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"data = importcsv(\"data_time.csv\", t_col=1, ϵ_col=2, σ_col=3);\nRheoTimeDataType(data)","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"┌ Warning: Please note that NaN data rows are not included in resultant data struct.\n└ @ RHEOS /home/alessandra/.julia/dev/RHEOS/src/IO.jl:11","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"strain_and_stress::TimeDataType = 3","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"The time, strain and stress data are stored into a RheoTimeData struct. ","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Step 2: Model fit","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Let's fit a Maxwell model via its relaxation modulus, G, as our data is from a stress relaxation test, thus the strain is imposed. The first argument is our data, the second argument tells RHEOS which model to fit (RheoModelClass) and the final argument tells RHEOS whether to fit the model using a relaxation modulus (strainimpsed) or creep modulus (stressimposed). The function will return a RheoModel object, i.e. a RheoModelClass with fixed values for the parameters. ","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"maxwell_model = modelfit(data, Maxwell, strain_imposed)","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"┌ Warning: Initial values for model parameters is set to [0.5, 0.5] by default\n└ @ RHEOS /home/alessandra/.julia/dev/RHEOS/src/processing.jl:212","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Time: 2.136837673 s, Why: XTOL_REACHED, Parameters: [4.0054, 2.003], Error: 0.022310985023644148","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Model: maxwell\n\nParameter values: (η = 4.0054017305374146, k = 2.003000020980835) \n\n                ___\n            _____| |________╱╲  ╱╲  ╱╲  ___\n                _|_|          ╲╱  ╲╱  ╲╱\n                  η                  k","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"For the fitting process RHEOS relies on the optimistion package NLopt.jl. RHEOS makes use of a local derivative free algorithm, specifically the Tom Rowan's \"Subplex\" algorithm originally introduced in ","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"T. Rowan, \"Functional Stability Analysis of Numerical Algorithms\", Ph.D. thesis, Department of Computer Sciences, University of Texas at Austin, 1990.","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Next, we wll fit a fractional Maxwell (spring) model (the only difference from the above model is that the dash-pot is replaced by a spring-pot). This time we will also add upper and lower bounds on the model parameters. This is highly recommended for fractional models in particular as values less than 0 or greater than 1 for the spring-pot parameter are unphysical and can cause errors in the Mittag-Leffler function used (more information about the fractional models in XXX). To facilitate the convergence of the fitting algorithm, it is also suggested to define an initial set of parameter (the function uses 0.5 for all paramters if not defined).","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"# Lower bounds\nLo = (cₐ=0.0, a=0.01, k=0.0)\n# Upper bounds\nHi = (cₐ=Inf, a=0.99, k=Inf)\n# Initial parameters\nP0 = (cₐ=0.1, a=0.2, k=2.0)\n\nFmaxwell_model = modelfit(data, FractS_Maxwell, strain_imposed,lo = Lo, hi = Hi, p0 = P0)","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Time: 1.866023795 s, Why: XTOL_REACHED, Parameters: [3.93835, 0.99, 2.02904], Error: 0.026470897141755965","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Model: fractmaxwell_spring\n\nParameter values: (cₐ = 3.9383500588392377, a = 0.99, k = 2.029041423678936) \n\n           ___╱╲_________╱╲  ╱╲  ╱╲  ________\n              ╲╱           ╲╱  ╲╱  ╲╱\n                cₐ,a               k","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Further optional parameters can be defined in the fitting function, such as the relative tollerance (default parameter of 1e-4) or the fiite differece forumal to use for the derivative (BD = Backward derivative by default, CD = central difference). If the user is interested in the model parameters on each optimisation iteration, they can be printed on the terminal by enabling verbose = true. ","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"IMPORTANT NOTE Often an ideal step loading is assumed, which simplifies the equations in the first section to sigma(t) = G(t) epsilon_0 and epsilon(t) = J(t) sigma_0. This enables the modulus to be used directly for the fitting, which vastly reduces the computational burden. For this reason, RHEOS provides a dedicated function modelstepfit that requires the same parameters as modelfit. If this assumption is appropriate for the data then fitting can be sped up greatly by use of this function.","category":"page"},{"location":"fitpredictTime/#Predicting-1","page":"Time data","title":"Predicting","text":"","category":"section"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"RHEOS allows the user to simulate the response of a model (with defined parameters, RheoModel struct) to an imposed loading. ","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Given an incomplete data set (time data with only either stress or strain missing) and model with values substituted into parameters (RheoModel), return a new \"complete\" dataset based on the model with the simulated missing variable.","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Assess quality of the fit","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"The ability of predicting model's response is first exploited to assess the quality of the fits above. The incomplete RheoTimeData variable is defined by extracting the time and the imposed variable (for the current example, the strain).","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"data_ext = extract(data,strain_only);\n# alternatively: data_ext = extract(data,1);\n\nRheoTimeDataType(data_ext)","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"strain_only::TimeDataType = 1","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"For the prediction, RHEOS' function modelpredict requires the incomplete data set and a model with fixed parameters (RheoModel). For the assessment of the fitting quality the RheoModel required is the output of the fitting function. ","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"maxwell_predict = modelpredict(data_ext, maxwell_model)\n\n# Now we can plot data and model together for comparison\nusing PyPlot\nplot(data.t,data.σ, \"o\", markersize = 5);\nplot(maxwell_predict.t,maxwell_predict.σ, color = \"red\");\nxlabel(\"Time\");\nylabel(\"Stress\");","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"(Image: png)","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Simulate different model behaviours","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"The ability of predicting model's response can be exploited to simulate the behaviour of the model to other external loading conditions. For example, we will explore the response of the fitted model to a creep experiment. ","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"First we need to define an incomplete RheoTimeData struct, which can be achieved via the data generation functions provided in RHEOS (see section Generating data).","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"# Define timeline\ndσ = timeline()\n# and a step in stress\ndσ = stressfunction(dσ,hstep())\n\n# we can now predict the creep response of the Maxwell model \nmaxwell_creepPredict = modelsteppredict(dσ,maxwell_model)\n# Visualisation of the imposed loading\nplot(maxwell_creepPredict.t,maxwell_creepPredict.σ, \"--\")\n# Visualisation of the simulated response\nplot(maxwell_creepPredict.t,maxwell_creepPredict.ϵ);\nxlabel(\"Time\");\nylabel(\"Strain\");","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"(Image: png)","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"IMPORTANT NOTE As for the fitting procedure, if an ideal step loading is assumed, RHEOS provides a dedicated function modelsteppredict that requires the same parameters as modelpredict which significantly reduces the computating time. ","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"Similarly, more complex behaviour can be simulated (such as a stairs loading).","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"# Define timeline\ndσ = timeline()\n# and a step in stress\ndσ = stressfunction(dσ,stairs())\n\n# we can now predict the stairs response of the Maxwell model \nmaxwell_creepPredict = modelpredict(dσ,maxwell_model)\n# Plotting\nplot(maxwell_creepPredict.t,maxwell_creepPredict.σ, \"--\")\nplot(maxwell_creepPredict.t,maxwell_creepPredict.ϵ);\nxlabel(\"Time\");\nylabel(\"Strain\");","category":"page"},{"location":"fitpredictTime/#","page":"Time data","title":"Time data","text":"(Image: png)","category":"page"}]
}
